Процедура СписокОпераций(Структура)
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ПЕРВЫЕ 100000
	|ХО.Период,
	|ХО.Регистратор,
	|ХО.Счет,
	|ХО.КорСчет,
	|ХО.Организация,
	|ХО.Валюта,
	|ХО.ВалютаКор,
	|ХО.СуммаОборотДт,
	|ХО.СуммаОборотКт,
	|ХО.ВалютнаяСуммаОборотДт,
	|ХО.ВалютнаяСуммаОборотКт,
	|ХО.Субконто1,
	|ХО.Субконто2,
	|ХО.Субконто3,
	|ХО2.Субконто1 КАК СубконтоКт1,
	|ХО2.Субконто2 КАК СубконтоКт2,
	|ХО2.Субконто3 КАК СубконтоКт3,
	|ХО.КоличествоОборотДт,
	|ХО.КоличествоОборотКт
	|,ХО1.Содержание
	|,ХО1.ВидРегламентнойОперации,
	|ХО1.НДСПродукции,
	|Истина КАК Выгружать
	|ПОМЕСТИТЬ ДанныеОтбора
	|ИЗ РЕгистрБухгалтерии.Хозрасчетный.Обороты(,,Запись,,,,,) КАК ХО
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Хозрасчетный КАК ХО1 ПО ХО1.Регистратор = ХО.Регистратор И ХО1.НомерСтроки = ХО.НомерСтроки
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ РЕгистрБухгалтерии.Хозрасчетный.Обороты(,,Запись,,,,,) КАК ХО2 ПО ХО2.Регистратор = ХО.Регистратор 
	|И ХО2.НомерСтроки = ХО.НомерСтроки  И ХО2.СуммаОборотКт>0
	
	
	|ГДЕ НАЧАЛОПЕРИОДА(ХО.ПЕРИОД,ДЕНЬ) МЕЖДУ НАЧАЛОПЕРИОДА(&ДатаН,ДЕНЬ) И КОНЕЦПЕРИОДА(&ДатаК,ДЕНЬ)
	|И  ХО.Организация = &Организация 
	|И (ХО.Счет В ИЕРАРХИИ(&СчетБУ) ИЛИ ХО.КорСчет В ИЕРАРХИИ(&СчетБУ))   И ХО.СуммаОборотДт>0
	|УПОРЯДОЧИТЬ ПО  ХО.Период УБЫВ
	|;
	
	|ВЫБРАТЬ 
	|ДанныеОтбора.Период,
	|ДанныеОтбора.Регистратор,
	|ВЫБОР КОГДА ДанныеОтбора.СуммаОборотДт>0 ТОГДА ДанныеОтбора.Счет ИНАЧЕ ДанныеОтбора.КорСчет КОНЕЦ КАК СчетДт,
	|ВЫБОР КОГДА ДанныеОтбора.СуммаОборотДт>0 ТОГДА ДанныеОтбора.КорСчет ИНАЧЕ ДанныеОтбора.Счет  КОНЕЦ КАК СчетКт,
	|ДанныеОтбора.Организация,
	|ДанныеОтбора.Валюта,
	|ДанныеОтбора.ВалютаКор,
	|ДанныеОтбора.СуммаОборотДт,
	|ДанныеОтбора.СуммаОборотКт,
	|ДанныеОтбора.ВалютнаяСуммаОборотДт,
	|ДанныеОтбора.ВалютнаяСуммаОборотКт,
	|ДанныеОтбора.Субконто1,
	|ДанныеОтбора.Субконто2,
	|ДанныеОтбора.Субконто3,
	|ДанныеОтбора.СубконтоКт1,
	|ДанныеОтбора.СубконтоКт2,
	|ДанныеОтбора.СубконтоКт3,
	|ДанныеОтбора.КоличествоОборотДт,
	|ДанныеОтбора.КоличествоОборотКт,
	|ДанныеОтбора.Содержание,
	|ДанныеОтбора.ВидРегламентнойОперации,
	|ДанныеОтбора.НДСПродукции,
	|ДанныеОтбора.Выгружать
	|ИЗ ДанныеОтбора  КАК  ДанныеОтбора
	
	|";
	Запрос.УстановитьПараметр("ДатаН",Структура.ДатаН);
	Запрос.УстановитьПараметр("ДатаК",Структура.ДатаК);
	Запрос.УстановитьПараметр("Организация",Структура.Организация);
	Запрос.УстановитьПараметр("СчетБУ",Структура.СчетБУ);
	
	Результат = Запрос.Выполнить().Выгрузить();
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Структура.Вставить("Результат",Результат);
КонецПроцедуры

Процедура АвансовыйОтчет(Структура)
	
КонецПроцедуры

Функция ПолучитьСтандартнуюСтруктуру(эл);
	Структура = Новый Структура;
	Структура.Вставить("ID",эл.УникальныйИдентификатор());
	Структура.Вставить("NOR",эл.Код);
	Структура.Вставить("NAME",СокрЛП(эл.Наименование));
	Возврат Структура;
КонецФункции

Процедура СборДанныхДляОбмена(Структура)   Экспорт     
	СписокОпераций(Структура);
	
	//ВыгрузитьДанныеВФайл(Структура);
КонецПроцедуры

Процедура ЗаполнитьМассивОпераций(Операции,эл,ИД)
	//	СоответствияГрупп.Вставить("МассивОрганизаций","CORP");
	//СоответствияГрупп.Вставить("МассивКонтрагентов","CONTR");
	//СоответствияГрупп.Вставить("МассивНоменклатуры","PRODUCT");
	//СоответствияГрупп.Вставить("МассивСчетов","IND");
	//СоответствияГрупп.Вставить("МассивРегистраторов","REG");
	//СоответствияГрупп.Вставить("МассивСкладов","WAREHOUSE");
	//СоответствияГрупп.Вставить("МассивДоговора","CONTRACTS");
	//СоответствияГрупп.Вставить("МассивПодразделения","DEPARTMENTS");
	//СоответствияГрупп.Вставить("МассивНоменклатурныеГруппы","PRODUCT_UNIT");
	//СоответствияГрупп.Вставить("МассивСтатьиЗатрат","COST_ITEM");
	//СоответствияГрупп.Вставить("МассивОпераций","OPERATIONS");
	
	
	СтруктураОперации = Новый Структура;
	СтруктураОперации.Вставить("DOC",Истина);
	СтруктураОперации.Вставить("ID",ИД);
	СтруктураОперации.Вставить("PERIOD",эл.Период);
	СтруктураОперации.Вставить("REG",СокрЛП(эл.Регистратор.УникальныйИдентификатор()));
	СтруктураОперации.Вставить("CORP",СокрЛП(эл.Организация.УникальныйИдентификатор()));
	СтруктураОперации.Вставить("IND_DT",СокрЛП(эл.СчетДт.УникальныйИдентификатор()));
	СтруктураОперации.Вставить("IND_RT",СокрЛП(эл.СчетКт.УникальныйИдентификатор()));
	СтруктураОперации.Вставить("SUM",Формат(эл.СуммаОборотДт,"ЧГ=0"));
	СтруктураОперации.Вставить("KOL",Формат(эл.КоличествоОборотДт,"ЧГ=0"));
	СтруктураОперации.Вставить("DOP",СокрЛП(эл.Содержание));
	
	Для А=1 по 3 Цикл
		ИмяЭл = "Субконто"+А;
		ИмяЭлА = "DIV_DT"+А;
		Если ЗначениеЗаполнено(эл[ИмяЭл]) Тогда
			СтруктураОперации.Вставить(ИмяЭлА,СокрЛП(эл[ИмяЭл].УникальныйИдентификатор()));
		Иначе
			СтруктураОперации.Вставить(ИмяЭлА,"");
		КонецЕсли;
	КонецЦикла;
	
	Для А=1 по 3 Цикл
		ИмяЭл = "СубконтоКт"+А;
		ИмяЭлА = "DIV_КT"+А;
		Если ЗначениеЗаполнено(эл[ИмяЭл]) Тогда
			СтруктураОперации.Вставить(ИмяЭлА,СокрЛП(эл[ИмяЭл].УникальныйИдентификатор()));
		Иначе
			СтруктураОперации.Вставить(ИмяЭлА,"");
		КонецЕсли;
	КонецЦикла;
	Операции.Добавить(СтруктураОперации);
КонецПроцедуры

Процедура ЗаполнитьМассивыДанных(Структура)
	Организации = Новый Массив;
	Контрагенты = Новый Массив;
	Номенклатура = Новый Массив;
	Счета = Новый Массив;
	Регистраторы = Новый Массив;
	Склады = Новый Массив;
	Договоры = Новый Массив;
	Подразделения = Новый Массив;
	НГ = Новый Массив;
	СЗ = Новый Массив;
	Операции = Новый Массив;

	
	ТипыСубконто = Новый Массив;
	ИД = 1;
	Для каждого эл из Структура.МассивДанных Цикл
		Если Организации.Найти(эл.Организация) = Неопределено Тогда
			Организации.Добавить(эл.Организация);
		КонецЕсли;
		
		ЗаполнитьМассивОпераций(Операции,эл,ИД);
		 ИД = ИД+1;
		///___________________ контрагенты ___________________________
		Для А=1 по 3 Цикл
			ИмяЭл = "Субконто"+А;
			Если ТипЗнч(эл[ИмяЭл]) = Тип("СправочникСсылка.Контрагенты") Тогда
				Если Контрагенты.Найти(эл[ИмяЭл]) = Неопределено Тогда
					Контрагенты.Добавить(эл[ИмяЭл]);
				КонецЕсли;
			ИначеЕсли ТипЗнч(эл[ИмяЭл]) = Тип("СправочникСсылка.Номенклатура") Тогда
				Если Номенклатура.Найти(эл[ИмяЭл]) = Неопределено Тогда
					Номенклатура.Добавить(эл[ИмяЭл]);
				КонецЕсли;
			ИначеЕсли ТипЗнч(эл[ИмяЭл]) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
				Если НГ.Найти(эл[ИмяЭл]) = Неопределено Тогда
					НГ.Добавить(эл[ИмяЭл]);
				КонецЕсли;   			
			ИначеЕсли ТипЗнч(эл[ИмяЭл]) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
				Если Подразделения.Найти(эл[ИмяЭл]) = Неопределено Тогда
					Подразделения.Добавить(эл[ИмяЭл]);
				КонецЕсли;
			ИначеЕсли ТипЗнч(эл[ИмяЭл]) = Тип("СправочникСсылка.Склады") Тогда
				Если Склады.Найти(эл[ИмяЭл]) = Неопределено Тогда
					Склады.Добавить(эл[ИмяЭл]);
				КонецЕсли;
			ИначеЕсли ТипЗнч(эл[ИмяЭл]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				Если Договоры.Найти(эл[ИмяЭл]) = Неопределено Тогда
					Договоры.Добавить(эл[ИмяЭл]);
				КонецЕсли;
			ИначеЕсли ТипЗнч(эл[ИмяЭл]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
				Если СЗ.Найти(эл[ИмяЭл]) = Неопределено Тогда
					СЗ.Добавить(эл[ИмяЭл]);
				КонецЕсли;
				
			КонецЕсли;
			
			
			Если ТипыСубконто.Найти(ТипЗнч(эл[ИмяЭл])) = Неопределено Тогда
				ТипыСубконто.Добавить(ТипЗнч(эл[ИмяЭл]));
			КонецЕсли;	
		КонецЦикла;
		
		Для А=1 по 3 Цикл
			ИмяЭл = "СубконтоКт"+А;
			Если ТипЗнч(эл[ИмяЭл]) = Тип("СправочникСсылка.Контрагенты") Тогда
				Если Контрагенты.Найти(эл[ИмяЭл]) = Неопределено Тогда
					Контрагенты.Добавить(эл[ИмяЭл]);
				КонецЕсли;
			ИначеЕсли ТипЗнч(эл[ИмяЭл]) = Тип("СправочникСсылка.Номенклатура") Тогда
				Если Номенклатура.Найти(эл[ИмяЭл]) = Неопределено Тогда
					Номенклатура.Добавить(эл[ИмяЭл]);
				КонецЕсли;
			ИначеЕсли ТипЗнч(эл[ИмяЭл]) = Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
				Если НГ.Найти(эл[ИмяЭл]) = Неопределено Тогда
					НГ.Добавить(эл[ИмяЭл]);
				КонецЕсли;   			
			ИначеЕсли ТипЗнч(эл[ИмяЭл]) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
				Если Подразделения.Найти(эл[ИмяЭл]) = Неопределено Тогда
					Подразделения.Добавить(эл[ИмяЭл]);
				КонецЕсли;
			ИначеЕсли ТипЗнч(эл[ИмяЭл]) = Тип("СправочникСсылка.Склады") Тогда
				Если Склады.Найти(эл[ИмяЭл]) = Неопределено Тогда
					Склады.Добавить(эл[ИмяЭл]);
				КонецЕсли;
			ИначеЕсли ТипЗнч(эл[ИмяЭл]) = Тип("СправочникСсылка.ДоговорыКонтрагентов") Тогда
				Если Договоры.Найти(эл[ИмяЭл]) = Неопределено Тогда
					Договоры.Добавить(эл[ИмяЭл]);
				КонецЕсли;
			ИначеЕсли ТипЗнч(эл[ИмяЭл]) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
				Если СЗ.Найти(эл[ИмяЭл]) = Неопределено Тогда
					СЗ.Добавить(эл[ИмяЭл]);
				КонецЕсли;
			КонецЕсли;
			Если ТипыСубконто.Найти(ТипЗнч(эл[ИмяЭл])) = Неопределено Тогда
				ТипыСубконто.Добавить(ТипЗнч(эл[ИмяЭл]));
			КонецЕсли;	
		КонецЦикла;

		//_____________________ Счета ___________________________________
		Если Счета.Найти(эл.СчетДт) = Неопределено Тогда
			Счета.Добавить(эл.СчетДт);
		КонецЕсли;
		Если Счета.Найти(эл.СчетКт) = Неопределено Тогда
			Счета.Добавить(эл.СчетКт);
		КонецЕсли;
		Если Регистраторы.Найти(эл.Регистратор) = Неопределено Тогда
			Регистраторы.Добавить(эл.Регистратор);
		КонецЕсли;
		
		///________
	КонецЦикла;
	Для каждого эл из Организации Цикл
		СтруктураОрганизации = ПолучитьСтандартнуюСтруктуру(эл);
		
		СтруктураОрганизации.Вставить("INN",СокрЛП(эл.ИНН));
		СтруктураОрганизации.Вставить("KPP",СокрЛП(эл.КПП));
		
		Структура.МассивОрганизаций.Добавить(СтруктураОрганизации);	
	КонецЦикла;
	
	
	Для каждого эл из Регистраторы Цикл
		СтруктураОрганизации = Новый Структура;
		СтруктураОрганизации.Вставить("ID",эл.УникальныйИдентификатор());
		СтруктураОрганизации.Вставить("NOR",эл.Номер);
		СтруктураОрганизации.Вставить("NAME",СокрЛП(эл.Ссылка));
		
		Структура.МассивРегистраторов.Добавить(СтруктураОрганизации);	
	КонецЦикла;
	
	
	Для каждого эл из Контрагенты Цикл
		СтруктураОрганизации = ПолучитьСтандартнуюСтруктуру(эл);
		СтруктураОрганизации.Вставить("INN",СокрЛП(эл.ИНН));
		СтруктураОрганизации.Вставить("KPP",СокрЛП(эл.КПП));
		
		Структура.МассивКонтрагентов.Добавить(СтруктураОрганизации);	
	КонецЦикла;
	
	Для каждого эл из Номенклатура Цикл
		СтруктураОрганизации = Новый Структура;
		СтруктураОрганизации.Вставить("ID",эл.УникальныйИдентификатор());
		СтруктураОрганизации.Вставить("NOR",эл.Артикул);
		СтруктураОрганизации.Вставить("NAME",СокрЛП(эл.Наименование));
		СтруктураОрганизации.Вставить("ED",СокрЛП(эл.ЕдиницаХраненияОстатков));
		СтруктураОрганизации.Вставить("USL",СокрЛП(эл.Услуга));
		
		Структура.МассивНоменклатуры.Добавить(СтруктураОрганизации);	
	КонецЦикла;
	
	Для каждого эл из Счета Цикл
		СтруктураОрганизации = ПолучитьСтандартнуюСтруктуру(эл);
		Структура.МассивСчетов.Добавить(СтруктураОрганизации);	
	КонецЦикла;
	
	Для каждого эл из Склады Цикл
		СтруктураОрганизации = ПолучитьСтандартнуюСтруктуру(эл);
		Структура.МассивСкладов.Добавить(СтруктураОрганизации);	
	КонецЦикла;
	Для каждого эл из Договоры Цикл
		СтруктураОрганизации = ПолучитьСтандартнуюСтруктуру(эл);
		Структура.МассивДоговора.Добавить(СтруктураОрганизации);	
	КонецЦикла;
	
	Для каждого эл из Подразделения Цикл
		СтруктураОрганизации = ПолучитьСтандартнуюСтруктуру(эл);		
		Структура.МассивСкладов.Добавить(СтруктураОрганизации);	
	КонецЦикла;
	Для каждого эл из НГ Цикл
		СтруктураОрганизации = ПолучитьСтандартнуюСтруктуру(эл);		
		Структура.МассивНоменклатурныеГруппы.Добавить(СтруктураОрганизации);	
	КонецЦикла;
	Для каждого эл из СЗ Цикл
		СтруктураОрганизации = ПолучитьСтандартнуюСтруктуру(эл);		
		Структура.МассивСтатьиЗатрат.Добавить(СтруктураОрганизации);	
	КонецЦикла;
	
	Структура.МассивОпераций.Добавить(Операции);
	
	Сообщение = Новый СообщениеПользователю;
	Для каждого эл из ТипыСубконто Цикл
		Сообщение.Текст = Строка(эл);
		Сообщение.Сообщить();
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыгрузитьДанныеВФайл(Структура) Экспорт
	//МассивБонусов = Новый Массив;
	МассивКонтрагентов = Новый Массив;
	МассивНоменклатуры = Новый Массив;
	МассивОрганизаций = Новый Массив;
	МассивСчетов = Новый Массив;
	МассивРегистраторов = Новый Массив;
	МассивСкладов = Новый Массив;
	МассивДоговора = Новый Массив;
	МассивПодразделения = Новый Массив;
	МассивНоменклатурныеГруппы = Новый Массив;
	МассивСтатьиЗатрат = Новый Массив;
	МассивОпераций= Новый Массив;


	
	
	Структура.Вставить("МассивОрганизаций",МассивОрганизаций);
	Структура.Вставить("МассивКонтрагентов",МассивКонтрагентов);
	Структура.Вставить("МассивНоменклатуры",МассивНоменклатуры);
	Структура.Вставить("МассивСчетов",МассивСчетов);
	Структура.Вставить("МассивРегистраторов",МассивРегистраторов);
	Структура.Вставить("МассивСкладов",МассивСкладов);
	Структура.Вставить("МассивДоговора",МассивДоговора);
	Структура.Вставить("МассивПодразделения",МассивПодразделения);
	Структура.Вставить("МассивНоменклатурныеГруппы",МассивНоменклатурныеГруппы);
	Структура.Вставить("МассивСтатьиЗатрат",МассивСтатьиЗатрат);
	Структура.Вставить("МассивОпераций",МассивОпераций);
	
	СоответствияГрупп = Новый Соответствие;
	СоответствияГрупп.Вставить("МассивОрганизаций","CORP");
	СоответствияГрупп.Вставить("МассивКонтрагентов","CONTR");
	СоответствияГрупп.Вставить("МассивНоменклатуры","PRODUCT");
	СоответствияГрупп.Вставить("МассивСчетов","IND");
	СоответствияГрупп.Вставить("МассивРегистраторов","REG");
	СоответствияГрупп.Вставить("МассивСкладов","WAREHOUSE");
	СоответствияГрупп.Вставить("МассивДоговора","CONTRACTS");
	СоответствияГрупп.Вставить("МассивПодразделения","DEPARTMENTS");
	СоответствияГрупп.Вставить("МассивНоменклатурныеГруппы","PRODUCT_UNIT");
	СоответствияГрупп.Вставить("МассивСтатьиЗатрат","COST_ITEM");
	//СоответствияГрупп.Вставить("МассивОпераций","OPERATIONS");

	
	ЗаполнитьМассивыДанных(Структура);
	//______________________________файл формируем __________________
	МассивФайлов = Новый Массив;     
	ИмяФайла = "excUPP.json";
	ПутьВыгружаемыхФайлов = "D:\Users\buhaudit2\Documents\Французова_НЕ_трогать\";
	
	ФайлJSON = ПолучитьИмяВременногоФАйла("json");
	//_______________________________Запись ссылочных значений________________________________________
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.ПроверятьСтруктуру = Ложь;
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(,Символы.Таб);
	ЗаписьJSON.ОткрытьФайл(ФайлJSON,,,ПараметрыЗаписиJSON);
	Для каждого ст из  СоответствияГрупп Цикл
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства(ст.Значение);
		ЗаписьJSON.ЗаписатьНачалоМассива();
		Для каждого эл из Структура[ст.Ключ] Цикл
			ДобавитьСкрипт(эл,ЗаписьJSON);
		КонецЦикла;	  
		ЗаписьJSON.ЗаписатьКонецМассива();
	КонецЦикла;
	

	////_________________________ Операции _____________________________________  
	ЗаписьJSON.ЗаписатьИмяСвойства("OPERATIONS");
	ЗаписьJSON.ЗаписатьНачалоМассива();
	Для каждого эл из  Структура.МассивОпераций Цикл
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		Для каждого ст из эл Цикл
			Значение = "Документы";//ст.Значение;
			Если НЕ ТипЗнч(Значение) = Тип("Строка") 
				ИЛИ  НЕ ТипЗнч(Значение) = Тип("Число") 
				ИЛИ НЕ ТипЗнч(Значение) = Тип("Булево") Тогда
				Значение = Строка("Операция");
			КонецЕсли;	  
			ЗаписьJSON.ЗаписатьИмяСвойства(Значение);
			ЗаписьJSON.ЗаписатьЗначение(Значение);
			Если  ст.Свойство("DOC") Тогда
				ЗаписьJSON.ЗаписатьИмяСвойства("DOC");
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
				Для каждого элн из ст Цикл
					ЗначениеНачисления = элн.Значение;
					Если НЕ ТипЗнч(ЗначениеНачисления) = Тип("Строка") 
						ИЛИ  НЕ ТипЗнч(ЗначениеНачисления) = Тип("Число") 
						ИЛИ НЕ ТипЗнч(ЗначениеНачисления) = Тип("Булево") Тогда
						ЗначениеНачисления = Строка(ЗначениеНачисления);
					КонецЕсли;
					ЗаписьJSON.ЗаписатьИмяСвойства(элн.Ключ);
					ЗаписьJSON.ЗаписатьЗначение(ЗначениеНачисления);
				КонецЦикла;
				ЗаписьJSON.ЗаписатьКонецОбъекта();
				//ИначеЕсли  ст.Ключ = "Списание" Тогда
				//	ЗаписьJSON.ЗаписатьИмяСвойства("Списание");
				//	ЗаписьJSON.ЗаписатьНачалоОбъекта();
				//	Для каждого Списание из ст.Значение Цикл
				//		Для каждого элс из Списание Цикл
				//			ЗначениеСписание = элс.Значение;
			//			Если НЕ ТипЗнч(ЗначениеСписание) = Тип("Строка") 
			//				ИЛИ  НЕ ТипЗнч(ЗначениеСписание) = Тип("Число") 
			//				ИЛИ НЕ ТипЗнч(ЗначениеСписание) = Тип("Булево") Тогда
			//				ЗначениеСписание = Строка(ЗначениеСписание);
			//			КонецЕсли;
			//			ЗаписьJSON.ЗаписатьИмяСвойства(элс.Ключ);
			//			ЗаписьJSON.ЗаписатьЗначение(ЗначениеСписание);
			//		КонецЦикла;
			//	КонецЦикла;
			//	ЗаписьJSON.ЗаписатьКонецОбъекта();
			КонецЕсли;	 
		КонецЦикла;	  
		ЗаписьJSON.ЗаписатьКонецОбъекта();
	КонецЦикла;	
	ЗаписьJSON.ЗаписатьКонецМассива();
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	ЗаписьJSON.Закрыть();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(ФайлJSON);
	Идентифтикатор = Новый УникальныйИдентификатор;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные,Идентифтикатор);
	
	Данные = ПолучитьИзВременногоХранилища(АдресХранилища);
	ЛокальныйПуть = ПутьВыгружаемыхФайлов+ИмяФайла;
	
	ДвоичныеДанные.Записать(ЛокальныйПуть);
	
КонецПроцедуры	

Процедура ДобавитьСкрипт(эл,ЗаписьJSON);
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	Для каждого тэл из эл Цикл
		Значение = тэл.Значение;
		Если НЕ ТипЗнч(Значение) = Тип("Строка") 
			ИЛИ  НЕ ТипЗнч(Значение) = Тип("Число") 
			ИЛИ НЕ ТипЗнч(Значение) = Тип("Булево") Тогда
			Значение = Строка(Значение);
		КонецЕсли;
		ЗаписьJSON.ЗаписатьИмяСвойства(тэл.Ключ);
		ЗаписьJSON.ЗаписатьЗначение(Значение);
	КонецЦикла;	
	ЗаписьJSON.ЗаписатьКонецОбъекта();
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//Авансовый отчет
//Амортизация ОС
//Ввод начальных остатков НДС
//Ввод начальных остатков по ОС
//Ввод начальных остатков по взаиморасчетам
//Возврат материалов из эксплуатации
//Возврат переданных товаров
//Возврат товаров от покупателя
//Возврат товаров поставщику
//Восстановление НДС
//Выдача денежных документов
//ГТД по импорту
//Закрытие года
//Комплектация номенклатуры
//Корректировка долга
//Корректировка записей регистров
//Корректировка поступления
//Корректировка прочих затрат
//Корректировка реализации
//Модернизация ОС
//Операция (бухгалтерский и налоговый учет)
//Определение финансовых результатов
//Оприходование материалов из производства
//Оприходование незавершенного производства
//Оприходование товаров
//Отражение зарплаты в регл учете
//Отражение НДС к вычету
//Отражение начисления НДС
//Отчет производства за смену
//Передача материалов в эксплуатацию
//Передача ОС
//Передача товаров
//Перемещение товаров
//Переоценка валютных средств
//Платежное поручение входящее
//Платежное поручение исходящее
//Платежное требование полученное
//Платежный ордер на поступление денежных средств
//Платежный ордер на списание денежных средств
//Погашение стоимости (спецодежда, спецоснастка, инвентарь)
//Подготовка к передаче ОС
//Подтверждение нулевой ставки НДС
//Получение услуг по переработке
//Поступление денежных документов
//Поступление доп. расходов
//Поступление товаров из переработки
//Поступление товаров и услуг
//Принятие к учету ОС
//Приходный кассовый ордер
//Прочие затраты
//Расходный кассовый ордер
//Расчет себестоимости
//Реализация отгруженных товаров
//Реализация товаров и услуг
//Реализация услуг по переработке
//Списание материалов из эксплуатации
//Списание НДС
//Списание ОС
//Списание расходов будущих периодов
//Списание товаров
//Счет-фактура выданный
//Требование-накладная
//Формирование записей книги покупок
//Формирование записей книги продаж
