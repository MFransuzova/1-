	
#Область СведенияОВнешнейОбработке

Функция СведенияОВнешнейОбработке() Экспорт
	
	// Объявим переменную, в которой мы сохраним и вернем "наружу" необходимые данные
	ПараметрыРегистрации = Новый Структура;
	
	// Объявим еще одну переменную, которая нам потребуется ниже
	МассивНазначений  = Новый Массив;
	
	// Первый параметр, который мы должны указать - это какой вид обработки системе должна зарегистрировать. 
	// Допустимые типы: ДополнительнаяОбработка, ДополнительныйОтчет, ЗаполнениеОбъекта, Отчет, ПечатнаяФорма, СозданиеСвязанныхОбъектов
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма");
	
	// Теперь нам необходимо передать в виде массива имен, к чему будет подключена наша ВПФ
	// Имейте ввиду, что можно задать имя в таком виде: Документ.* - в этом случае обработка будет подключена ко всем документам в системе, 
	// которые поддерживают механизм ВПФ
	МассивНазначений.Добавить("Документ.ВедомостьНаВыплатуЗарплатыВБанк");
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	
	// Теперь зададим имя, под которым ВПФ будет зарегистрирована в справочнике внешних обработок
	ПараметрыРегистрации.Вставить("Наименование", "Ведомость на пополнение счетов банковских карт сотрудников");
	
	// Зададим право обработке на использование безопасного режима. Более подробно можно узнать в справке к платформе (метод УстановитьБезопасныйРежим)
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	
	// Следующие два параметра играют больше информационную роль, т.е. это то, что будет видеть пользователь в информации к обработке
	ПараметрыРегистрации.Вставить("Версия", "1.0");    
	ПараметрыРегистрации.Вставить("Информация", "Дополнительная печатная форма к документу ведомость на выплату зарплаты");
	
	// Создадим таблицу команд (подробнее смотрим ниже)
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	
	// Добавим команду в таблицу
	ДобавитьКоманду(ТаблицаКоманд, "Ведомость на пополнение счетов банковских карт сотрудников", "ВедомостьНаВыплатуЗарплатыВБанк", "ВызовСерверногоМетода", Истина, "ПечатьMXL");
	
	// Сохраним таблицу команд в параметры регистрации обработки
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	// Теперь вернем системе наши параметры
	Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()
	
	// Создадим пустую таблицу команд и колонки в ней
	Команды = Новый ТаблицаЗначений;
	
	// Как будет выглядеть описание печатной формы для пользователя
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка")); 
	
	// Имя нашего макета, что бы могли отличить вызванную команду в обработке печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	// Тут задается, как должна вызваться команда обработки
	// Возможные варианты:
	// - ОткрытиеФормы - в этом случае в колонке идентификатор должно быть указано имя формы, которое должна будет открыть система
	// - ВызовКлиентскогоМетода - вызвать клиентскую экспортную процедуру из модуля формы обработки
	// - ВызовСерверногоМетода - вызвать серверную экспортную процедуру из модуля объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	
	// Следующий параметр указывает, необходимо ли показывать оповещение при начале и завершению работы обработки. Не имеет смысла при открытии формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	
	// Для печатной формы должен содержать строку ПечатьMXL 
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	// Добавляем команду в таблицу команд по переданному описанию.
	// Параметры и их значения можно посмотреть в функции ПолучитьТаблицуКоманд
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры

#КонецОбласти


#Область СтандартныеФункцииИПроцедурыВнешнихПечатныхФорм

// Сформировать печатные формы объектов
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов
//
Процедура Печать(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	СтруктураТипов 	= ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
	ПараметрыПечати = Новый Структура("ДополнитьКомплектВнешнимиПечатнымиФормами", Ложь);
	
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(
			КоллекцияПечатныхФорм,
			"ВедомостьНаВыплатуЗарплатыВБанк",
			"Дополнительная печатная форма к документу ведомость на выплату зарплаты",
			СформироватьПечатнуюФормуВедомости(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
	
КонецПроцедуры

Функция ПолучитьСтруктуруПечатнойФормыНаСервере(МассивОбъектов) Экспорт 
	
	СтруктураТипов 	= ОбщегоНазначенияУТ.СоответствиеМассивовПоТипамОбъектов(МассивОбъектов);
	ОбъектыПечати 	= Новый СписокЗначений;
	ПараметрыПечати = Новый Структура("ДополнитьКомплектВнешнимиПечатнымиФормами", Ложь);
	
	СтруктураОтвета = Новый Структура("ТабличныйДокумент", СформироватьПечатнуюФормуВедомости(СтруктураТипов, ОбъектыПечати, ПараметрыПечати));
	
	Возврат СтруктураОтвета;
	
КонецФункции

#КонецОбласти

#Область ПечатьВедомости
Функция ВернутьТекстЗапроса(СтруктураПараметровПечати) Экспорт
	//Заголовок
	//ДатаДокумента
	//нп
	//ЛицевойСчет		
	//ФИО				
	//Сумма		
	//Взыскано
	//ИтогоСумма		
	//ИтогоВзыскано
	//Филиал		
	//НДФФилиалаПериод		
	//СуммаНДФЛФилиала		
	//ДолжностьГД		
	//РасшифровкаГД			
	//ДолжностьГБ		
	//РасшифровкаГБ	
	ТекстЗапроса = "
	|ВЫБРАТЬ  ПЕРВЫЕ 1000
	|Ведомость.Ссылка КАК Источник,
	|Ведомость.Ссылка.Организация.НаименованиеСокращенное КАК Организация,
	|Ведомость.Ссылка.Подразделение КАК Подразделение,
	|Ведомость.Ссылка.Подразделение.РегистрацияВНалоговомОргане  КАК ИФНС,
	|Ведомость.Ссылка.Дата КАК Дата,
	|Ведомость.Ссылка.Номер КАК Номер,
	|Ведомость.Ссылка.ПериодРегистрации,
	|Ведомость.Ссылка.Руководитель КАК РасшифровкаГД,
	|Ведомость.Ссылка.ДолжностьРуководителя КАК ДолжностьГД,
	|Ведомость.Ссылка.ГлавныйБухгалтер КАК РасшифровкаГБ,
	|Ведомость.ссылка.ДолжностьГлавногоБухгалтера КАК ДолжностьГБ,
	|Ведомость.ФизическоеЛицо.ФИО КАК ФИО,
	|ЗПЛ.КВыплате КАК Сумма,
	|ЗПЛ.НомерЛицевогоСчета КАК ЛицевойСчет,
	|НДФЛ.Сумма КАК СуммаНДФЛФилиала,
	|Ведомость.ВзысканнаяСумма КАК Взыскано
	|ИЗ Документ.ВедомостьНаВыплатуЗарплатыВБанк.Состав КАК Ведомость
	|ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВБанк.Зарплата КАК ЗПЛ 
	| ПО ЗПЛ.Ссылка = Ведомость.Ссылка И ЗПЛ.ИдентификаторСтроки = Ведомость.ИдентификаторСтроки 
	|ЛЕВОЕ СОЕДИНЕНИЕ Документ.ВедомостьНаВыплатуЗарплатыВБанк.НДФЛ КАК  НДФЛ
	| ПО НДФЛ.Ссылка = Ведомость.Ссылка И НДФЛ.ИдентификаторСтроки = Ведомость.ИдентификаторСтроки 
	
	|ГДЕ Ведомость.Ссылка = &ТекущаяСсылка
	|УПОРЯДОЧИТЬ ПО Ведомость.ФизическоеЛицо ВОЗР
	|";
	Возврат ТекстЗапроса;
КонецФункции

Функция СформироватьПечатнуюФормуВедомости(СтруктураТипов, ОбъектыПечати, ПараметрыПечати) 
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВЕДОМОСТЬНАКАРТЫ";
	
	НомерТипаДокумента = 0;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого СтруктураОбъектов Из СтруктураТипов Цикл
		
		НомерТипаДокумента = НомерТипаДокумента + 1;
		Если НомерТипаДокумента > 1 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(СтруктураОбъектов.Ключ);
		//ДанныеДляПечати = МенеджерОбъекта.ПолучитьДанныеДляПечатнойФормыВедомость(ПараметрыПечати, СтруктураОбъектов.Значение);
		
		ЗаполнитьТабличныйДокументВедомость(ТабличныйДокумент, СтруктураОбъектов.Значение[0], ПараметрыПечати);
		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ТабличныйДокумент;
КонецФункции


Процедура ЗаполнитьТабличныйДокументВедомость(ТабДокумент, ОбъектыПечати, ПараметрыПечати);

	СтруктураПараметровПечати = Новый Структура;
	
	Сообщение = Новый СообщениеПользователю;
	ТекОбъект = ОбъектыПечати;
	РД = ОбщегоНазначенияУТ.РазностьДат(ТекущаяДата(), ТекущаяДата(), ТекОбъект);
	Сообщение.Текст = Строка(ТекОбъект);
	//Сообщение.Сообщить();
	
	Макет = ПолучитьМакет("Макет");
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ИмяПараметровПечати = "ПараметрыПечати_ВедомостьНаВыплатуЗарплатыВБанк";
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокиТаблицы");
	ОбластьПодвал  = Макет.ПолучитьОбласть("Подвал");
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ВернутьТекстЗапроса(СтруктураПараметровПечати);
	Запрос.УстановитьПараметр("ТекущаяСсылка", ТекОбъект.Ссылка);
	Результат = Запрос.Выполнить().Выгрузить();
	
	
	
	СтруктураПФ = Новый Структура;
	СтруктураПФ.Вставить("Заголовок",Неопределено);
	СтруктураПФ.Вставить("ДатаДокумента",Неопределено);
	СтруктураПФ.Вставить("нп",Неопределено);
	СтруктураПФ.Вставить("ЛицевойСчет",Неопределено);		
	СтруктураПФ.Вставить("ФИО",Неопределено);				
	СтруктураПФ.Вставить("Сумма",Неопределено);		
	СтруктураПФ.Вставить("Взыскано",Неопределено);
	СтруктураПФ.Вставить("ИтогоСумма",Неопределено);		
	СтруктураПФ.Вставить("ИтогоВзыскано",Неопределено);
	СтруктураПФ.Вставить("Филиал",Неопределено);		
	СтруктураПФ.Вставить("НДФФилиалаПериод",Неопределено);		
	СтруктураПФ.Вставить("СуммаНДФЛФилиала",Неопределено);		
	СтруктураПФ.Вставить("ДолжностьГД",Неопределено);		
	СтруктураПФ.Вставить("РасшифровкаГД",Неопределено);			
	СтруктураПФ.Вставить("ДолжностьГБ",Неопределено);		
	СтруктураПФ.Вставить("РасшифровкаГБ",Неопределено);
	
    СК = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Результат[0]);
	СтруктураПФ.Заголовок = "Ведомость № "+Строка(уатОбщегоНазначенияКлиентСервер.НомерДокументаНаПечать(СК.Номер, Истина, Истина))+" на пополнение счетов банковских карт сотрудников
	|для выплаты запработной платы за "+НРег(Формат(СК.Дата, "ДФ='MMMM yyyy ''г.'''"))+", компенсации дней
	|неиспользованного отпуска при увольнении
	|ОРГАНИЗАЦИЯ "+Строка(СК.Организация)+"";
	СтруктураПФ.ДатаДокумента = "ДАТА: "+НРег(Формат(СК.Дата, "ДФ='dd MMMM yyyy ''г.'''"));
	Если ЗначениеЗаполнено(СК.РасшифровкаГД) Тогда
		СК.РасшифровкаГД = Строка(СК.РасшифровкаГД.Инициалы)+" "+Строка(СК.РасшифровкаГД.Фамилия);
	КонецЕсли;
	Если ЗначениеЗаполнено(СК.РасшифровкаГБ) Тогда
		СК.РасшифровкаГБ = Строка(СК.РасшифровкаГБ.Инициалы)+" "+Строка(СК.РасшифровкаГБ.Фамилия);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(СтруктураПФ,СК);
	ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры,СтруктураПФ);
	ТабДокумент.Вывести(ОбластьШапка);
	ТабДокумент.Вывести(ОбластьШапкаТаблицы);	
	нп = 0;
	Для каждого стр из Результат Цикл
		нп = нп+1;
		СКСтроки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(стр);
		СКСтроки.Вставить("нп",нп);
		ЗаполнитьЗначенияСвойств(ОбластьСтрокаТаблицы.Параметры,СКСтроки);  
		ТабДокумент.Вывести(ОбластьСтрокаТаблицы);
	КонецЦикла;
	СтруктураПФ.ИтогоСумма = Результат.Итог("Сумма");
	СтруктураПФ.ИтогоВзыскано = Результат.Итог("Взыскано");
	СтруктураПФ.СуммаНДФЛФилиала= Результат.Итог("СуммаНДФЛФилиала"); 
	ДТ = Справочники.РегистрацииВНалоговомОргане.СведенияОПодразделении(СК.ИФНС,СК.Дата);
	МассивФилиалов = ВернутьМассивФилиалов();
	
	Если СтруктураПФ.СуммаНДФЛФилиала > 0 Тогда
		Если ДТ.Свойство("ФактическийАдрес") Тогда
			Для каждого эл из МассивФилиалов Цикл
				Если НЕ СтрНайти(ДТ.ФактическийАдрес,эл) =0 Тогда
					СтруктураПФ.Филиал = "НДФЛ "+Строка(эл);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		СтруктураПФ.НДФФилиалаПериод = "НДФЛ за "+НРег(Формат(СК.Дата, "ДФ='MMMM yyyy ''г.'''"));
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры,СтруктураПФ);
	ТабДокумент.Вывести(ОбластьПодвал);
	
КонецПроцедуры

Функция ВернутьМассивФилиалов()
	Массив = Новый Массив;
	Массив.Добавить("Норильск");
	Массив.Добавить("Ставрополь");     
	Массив.Добавить("Москва");
	Возврат Массив;
КонецФункции

#КонецОбласти

