// + АИГ Французова 21.12.2021 (Добавление функций печати КК_УчетГСМ)

Функция ПечатьСчетДоговорПокупателю(МассивОбъектов, ОбъектыПечати)
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|Док.Ссылка.Номер КАК НомерДок,
	|Док.Ссылка.Дата КАК ДатаДок,
	|Док.Ссылка КАК Ссылка,
	|""Поставщик"" КАК ПоставщикИсполнитель,
	|""Покупатель"" КАК ПокупательЗаказчик ,
	|Док.миа_НоменклатураДляПечати КАК Наименование,
	|NULL КАК ЮридическийАдрес,
	|NULL КАК Телефоны,
	|NULL КАК ИНН,
	|NULL КАК КПП,
	|NULL КАК БанковскиеРеквизиты,
	|NULL КАК НаименованиеДляПечатныхФорм,
	|NULL КАК ЮридическийАдресПолучателя,
	|NULL КАК ТелефоныПолучателя,
	|NULL КАК ИННПолучателя,
	|NULL КАК КПППолучателя,
	|NULL КАК БанковскиеРеквизитыПолучателя,
	|NULL КАК СрокОплатыУслуги,
	|NULL КАК СрокПоставкиУслуги,
	|NULL КАК АдресДоставкиУслуги,
	|NULL КАК СрокОплатыТовары,
	|NULL КАК СрокПоставкиТовары,
	|NULL КАК УсловияПоставкиТовары,
	|NULL КАК АдресДоставкиТовары,
	|NULL КАК ИныеУсловияТовары,
	|NULL КАК Счет,
	|NULL КАК НППТовар,
	|NULL КАК НППУслуга,
	|NULL КАК ТоварТовар,
	|NULL КАК ТоварУслуга,
	|NULL КАК ЕдиницаИзмеренияТовар,
	|NULL КАК ЕдиницаИзмеренияУслуга,
	|NULL КАК КоличествоТовар,
	|NULL КАК КоличествоУслуга,
	|NULL КАК ЦенаТовар,
	|NULL КАК ЦенаУслуга,
	|NULL КАК СуммаТовар,
	|NULL КАК СуммаУслуга,
	|NULL КАК Сумма,
	|NULL КАК НДС,
	|NULL КАК Всего,
	|NULL КАК СуммаПрописью,
	|NULL КАК ПечСтрокаНДС,
	|NULL КАК ПечДолжность,
	|NULL КАК ТекстДоверенности,
	|NULL КАК ПечПодпись
	|ИЗ Документ.СчетНаОплатуПокупателю.Товары КАК Док
	//| ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СчетНаОплатуПокупателю.Услуги КАК Услуги ПО Док.Ссылка = Услуги.Ссылка
	|ГДЕ Док.Ссылка В (&ТекДок)
	|";
	
	Запрос.УстановитьПараметр("ТекДок",МассивОбъектов);
	ТабДокумент = Новый ТабличныйДокумент;
    ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АИГ_СчетДоговорПокупателю";

	Результат = Запрос.Выполнить().Выгрузить();        
	АИГ_ОбщегоНазначения.ТаблицуЗначенийВМассив(Результат);

	Макет = ПолучитьМакет("АИГ_СчетДоговорПокупателю");//УправлениеПечатью.МакетПечатнойФормы("Документ.КК_УчетГСМ.ПечатнаяФормаПоГСМ");
	ОбластьЛоготип              = Макет.ПолучитьОбласть("Логотип");
	ОбластьПоставщик            = Макет.ПолучитьОбласть("Поставщик");
	ОбластьПолучатель           = Макет.ПолучитьОбласть("Получатель");
	ОбластьУсловияУслуги        = Макет.ПолучитьОбласть("УсловияУслуги");
	ОбластьУсловияТовар         = Макет.ПолучитьОбласть("УсловияТовар");
	ОбластьСсылка               = Макет.ПолучитьОбласть("Ссылка");  
	ОбластьУЕ                   = Макет.ПолучитьОбласть("УЕ");    
	ОбластьСчет                 = Макет.ПолучитьОбласть("Счет");      
	ОбластьШапкаТовар           = Макет.ПолучитьОбласть("ШапкаТовар");   
	ОбластьШапкаУслуги           = Макет.ПолучитьОбласть("ШапкаУслуги");
	ОбластьШапкаУслуги           = Макет.ПолучитьОбласть("ШапкаУслуги");
	ОбластьШапкаУслугиТовар      = Макет.ПолучитьОбласть("ШапкаУслугиТовар");
	ОбластьТовар                 = Макет.ПолучитьОбласть("Товар");
	ОбластьУслуги               = Макет.ПолучитьОбласть("Услуги");
	ОбластьИтог                  = Макет.ПолучитьОбласть("Итог");
	ОбластьПодвалУслуги           = Макет.ПолучитьОбласть("ПодвалУслуги");
	ОбластьПодвалТовар           = Макет.ПолучитьОбласть("ПодвалТовар");
	
	СтруктураШапки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Результат[0]);

	
	ТабДокумент.Вывести(ОбластьЛоготип);
	ЗаполнитьЗначенияСвойств(ОбластьПоставщик,СтруктураШапки);
	ЗаполнитьЗначенияСвойств(ОбластьПоставщик,ОбластьПолучатель);

	ТабДокумент.Вывести(ОбластьПоставщик);
	//СтруктураШапки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Результат[0]);
	//СтруктураШапки.Вставить("ТекстЗаголовка",Строка(СтруктураШапки.НомерДок)+" от "+Строка(Формат(СтруктураШапки.ДатаДок,"ДФ = дд.ММ.гггг")));
	//ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры,СтруктураШапки);
	//ТабДокумент.Вывести(ОбластьШапка);
	//ЗаполнитьЗначенияСвойств(ОбластьПодписи.Параметры,СтруктураШапки);
	//ТабДокумент.Вывести(ОбластьШапкаТаблицы);

	//Для каждого стр из Результат Цикл
	//	СК =  ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(стр);
	//	ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры,СК);
	//	ТабДокумент.Вывести(ОбластьСтрока);
	//КонецЦикла;	
	//ТабДокумент.Вывести(ОбластьПодписи);
    ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	Возврат ТабДокумент;
КонецФункции
// - АИГ Французова 21.12.2021 (Добавление функций печати КК_УчетГСМ)


// + АИГ Французова 21.12.2021 (Добавление функций печати КК_УчетГСМ)
Процедура Печать(МассивОбъектов,КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода, ПараметрыПечати = Неопределено) Экспорт
	
	//// Проверяем, нужно ли для макета СчетЗаказа формировать табличный документ.
	//Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АИГ_СчетДоговорПокупателю") Тогда
	//	
	//	// Формируем табличный документ и добавляем его в коллекцию печатных форм.
	//	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АИГ_СчетДоговорПокупателю", НСтр("ru = 'Счет-Договор покупателя'"), 
	//		ПечатьСчетДоговорПокупателю(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	//	
	//КонецЕсли;
	//	
	УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АИГ_СчетДоговорПокупателю",  НСтр("ru = 'Счет-Договор покупателя'"), 
	ПечатьСчетДоговорПокупателю(МассивОбъектов[0], ОбъектыПечати));
	ОбщегоНазначенияБП.ЗаполнитьДополнительныеПараметрыПечати(МассивОбъектов, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода);
КонецПроцедуры

// - АИГ Французова 21.12.2021 (Добавление функций печати КК_УчетГСМ)

// + АИГ Французова 18.01.2022 (регистрация отчета)

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

// Возвращает сведения о внешней обработке.
//
// Возвращаемое значение:
//   Структура - Подробнее см. ДополнительныеОтчетыИОбработки.СведенияОВнешнейОбработке().
//
Процедура УстановитьПараметр(ОбластьМакета, ИмяПараметра, ЗначениеПараметра)
	ОбластьМакета.Параметры.Заполнить(Новый Структура(ИмяПараметра, ЗначениеПараметра));
КонецПроцедуры
//
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ РЕГИСТРАЦИИ ОБРАБОТКИ
//

// Сервисная экспортная функция. Вызывается в основной программе при регистрации обработки в информационной базе
// Возвращает структуру с параметрами регистрации
//
// Возвращаемое значение:
//		Структура с полями:
//			Вид - строка, вид обработки, один из возможных: "ДополнительнаяОбработка", "ДополнительныйОтчет", 
//					"ЗаполнениеОбъекта", "Отчет", "ПечатнаяФорма", "СозданиеСвязанныхОбъектов"
//			Назначение - Массив строк имен объектов метаданных в формате: 
//					<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]. 
//					Например, "Документ.СчетЗаказ" или "Справочник.*". Параметр имеет смысл только для назначаемых обработок, для глобальных может не задаваться.
//			Наименование - строка - Наименование обработки, которым будет заполнено наименование элемента справочника по умолчанию.
//			Информация  - строка - Краткая информация или описание по обработке.
//			Версия - строка - Версия обработки в формате “<старший номер>.<младший номер>” используется при загрузке обработок в информационную базу.
//			БезопасныйРежим - булево - Принимает значение Истина или Ложь, в зависимости от того, требуется ли устанавливать или отключать безопасный режим 
//							исполнения обработок. Если истина, обработка будет запущена в безопасном режиме. 
//
//
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = Новый Структура;
	
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма");
	ПараметрыРегистрации.Вставить("Версия", "1.2");
	
	МассивНазначений = Новый Массив;
	МассивНазначений.Добавить("Документ.СчетНаОплатуПокупателя"); //Указываем документ к которому делаем внешнюю печ. форму
	
	ПараметрыРегистрации.Вставить("Назначение", МассивНазначений);
	ПараметрыРегистрации.Вставить("Наименование", "Счет-Договор покупателя");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Информация", "Счет-Договор покупателя");
	//ПараметрыРегистрации.Вставить("ВерсияБСП", "2.4.6.164");
	ПараметрыРегистрации.Вставить("ОпределитьНастройкиФормы", Ложь);
	
	РеквизитыТабличнойЧасти = Метаданные.Справочники.ДополнительныеОтчетыИОбработки.ТабличныеЧасти.Команды.Реквизиты;
	
	ТаблицаКоманд = Новый ТаблицаЗначений;
	ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	ТаблицаКоманд.Колонки.Добавить("ЗаменяемыеКоманды", РеквизитыТабличнойЧасти.ЗаменяемыеКоманды.Тип);
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = "Счет-Договор покупателя";  
	НоваяКоманда.Идентификатор = "АИГ_СчетДоговорПокупателю";
	НоваяКоманда.Использование = "ВызовСерверногоМетода";
	НоваяКоманда.ПоказыватьОповещение = Ложь;
	НоваяКоманда.Модификатор = "ПечатьMXL";
	НоваяКоманда.Скрыть = Ложь;
	
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	ПараметрыРегистрации.Вставить("Разрешения", Новый Массив);
	
	
	Возврат ПараметрыРегистрации;
	
КонецФункции
//
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ РЕГИСТРАЦИИ ОБРАБОТКИ
//
// Формирует структуру с параметрами регистрации регистрации обработки в информационной базе
//
// Параметры:
//	ОбъектыНазначенияФормы - Массив - Массив строк имен объектов метаданных в формате: 
//					<ИмяКлассаОбъектаМетаданного>.[ * | <ИмяОбъектаМетаданных>]. 
//					или строка с именем объекта метаданных 
//	НаименованиеОбработки - строка - Наименование обработки, которым будет заполнено наименование элемента справочника по умолчанию.
//							Необязательно, по умолчанию синоним или представление объекта
//	Информация  - строка - Краткая информация или описание обработки.
//							Необязательно, по умолчанию комментарий объекта
//	Версия - строка - Версия обработки в формате “<старший номер>.<младший номер>” используется при загрузке обработок в информационную базу.
//
//
// Возвращаемое значение:
//		Структура
//
Функция ПолучитьПараметрыРегистрации(ОбъектыНазначенияФормы = Неопределено, НаименованиеОбработки = "", Информация = "", Версия = "1.0")
	
	Если ТипЗнч(ОбъектыНазначенияФормы) = Тип("Строка") Тогда
		ОбъектНазначенияФормы = ОбъектыНазначенияФормы;
		ОбъектыНазначенияФормы = Новый Массив;
		ОбъектыНазначенияФормы.Добавить(ОбъектНазначенияФормы);
	КонецЕсли; 
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид", "ПечатнаяФорма");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Ложь);
	ПараметрыРегистрации.Вставить("Назначение", ОбъектыНазначенияФормы);
	
	Если Не ЗначениеЗаполнено(НаименованиеОбработки) Тогда
		НаименованиеОбработки = ЭтотОбъект.Метаданные().Представление();
	КонецЕсли; 
	ПараметрыРегистрации.Вставить("Наименование", НаименованиеОбработки);
	
	Если Не ЗначениеЗаполнено(Информация) Тогда
		Информация = ЭтотОбъект.Метаданные().Комментарий;
	КонецЕсли; 
	ПараметрыРегистрации.Вставить("Информация", Информация);
	
	ПараметрыРегистрации.Вставить("Версия", Версия);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

// Формирует таблицу значений с командами печати
//	
// Возвращаемое значение:
//		ТаблицаЗначений
//
Функция ПолучитьТаблицуКоманд()
	Команды = Новый ТаблицаЗначений;
	
	//Представление команды в пользовательском интерфейсе
	Команды.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	//Уникальный идентификатор команды или имя макета печати
	Команды.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	
	//Способ вызова команды: "ОткрытиеФормы", "ВызовКлиентскогоМетода", "ВызовСерверногоМетода"
	// "ОткрытиеФормы" - применяется только для отчетов и дополнительных отчетов
	// "ВызовКлиентскогоМетода" - вызов процедуры Печать(), определённой в модуле формы обработки
	// "ВызовСерверногоМетода" - вызов процедуры Печать(), определённой в модуле объекта обработки
	Команды.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	
	//Показывать оповещение.
	//Если Истина, требуется показать оповещение при начале и при завершении работы обработки. 
	//Имеет смысл только при запуске обработки без открытия формы
	Команды.Колонки.Добавить("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"));
	
	//Дополнительный модификатор команды. 
	//Используется для дополнительных обработок печатных форм на основе табличных макетов.
	//Для таких команд должен содержать строку ПечатьMXL
	Команды.Колонки.Добавить("Модификатор", Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

// Вспомогательная процедура.
//
Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование = "ВызовСерверногоМетода", ПоказыватьОповещение = Ложь, Модификатор = "ПечатьMXL")
	
	НоваяКоманда = ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление = Представление;
	НоваяКоманда.Идентификатор = Идентификатор;
	НоваяКоманда.Использование = Использование;
	НоваяКоманда.ПоказыватьОповещение = ПоказыватьОповещение;
	НоваяКоманда.Модификатор = Модификатор;
	
КонецПроцедуры


#КонецОбласти

#КонецЕсли

// - АИГ Французова 18.01.2022 (регистрация отчета)
